"""autogenerated by genpy from aibo_server/Joints.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class Joints(genpy.Message):
  _md5sum = "86bda1606b1e8eea8ce5b24eb34df225"
  _type = "aibo_server/Joints"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """#
#Header header
#The Joints of the Aibo
float64 jointLF1
float64 jointLF2     
float64 jointLF3     
float64 jointLH1     
float64 jointLH2 
float64 jointLH3 
float64 jointRF1
float64 jointRF2
float64 jointRF3
float64 jointRH1
float64 jointRH2
float64 jointRH3
float64 tailPan
float64 tailTilt
float64 headTilt
float64 headPan
float64 headNeck
float64 mouth

"""
  __slots__ = ['jointLF1','jointLF2','jointLF3','jointLH1','jointLH2','jointLH3','jointRF1','jointRF2','jointRF3','jointRH1','jointRH2','jointRH3','tailPan','tailTilt','headTilt','headPan','headNeck','mouth']
  _slot_types = ['float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       jointLF1,jointLF2,jointLF3,jointLH1,jointLH2,jointLH3,jointRF1,jointRF2,jointRF3,jointRH1,jointRH2,jointRH3,tailPan,tailTilt,headTilt,headPan,headNeck,mouth

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Joints, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.jointLF1 is None:
        self.jointLF1 = 0.
      if self.jointLF2 is None:
        self.jointLF2 = 0.
      if self.jointLF3 is None:
        self.jointLF3 = 0.
      if self.jointLH1 is None:
        self.jointLH1 = 0.
      if self.jointLH2 is None:
        self.jointLH2 = 0.
      if self.jointLH3 is None:
        self.jointLH3 = 0.
      if self.jointRF1 is None:
        self.jointRF1 = 0.
      if self.jointRF2 is None:
        self.jointRF2 = 0.
      if self.jointRF3 is None:
        self.jointRF3 = 0.
      if self.jointRH1 is None:
        self.jointRH1 = 0.
      if self.jointRH2 is None:
        self.jointRH2 = 0.
      if self.jointRH3 is None:
        self.jointRH3 = 0.
      if self.tailPan is None:
        self.tailPan = 0.
      if self.tailTilt is None:
        self.tailTilt = 0.
      if self.headTilt is None:
        self.headTilt = 0.
      if self.headPan is None:
        self.headPan = 0.
      if self.headNeck is None:
        self.headNeck = 0.
      if self.mouth is None:
        self.mouth = 0.
    else:
      self.jointLF1 = 0.
      self.jointLF2 = 0.
      self.jointLF3 = 0.
      self.jointLH1 = 0.
      self.jointLH2 = 0.
      self.jointLH3 = 0.
      self.jointRF1 = 0.
      self.jointRF2 = 0.
      self.jointRF3 = 0.
      self.jointRH1 = 0.
      self.jointRH2 = 0.
      self.jointRH3 = 0.
      self.tailPan = 0.
      self.tailTilt = 0.
      self.headTilt = 0.
      self.headPan = 0.
      self.headNeck = 0.
      self.mouth = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_18d.pack(_x.jointLF1, _x.jointLF2, _x.jointLF3, _x.jointLH1, _x.jointLH2, _x.jointLH3, _x.jointRF1, _x.jointRF2, _x.jointRF3, _x.jointRH1, _x.jointRH2, _x.jointRH3, _x.tailPan, _x.tailTilt, _x.headTilt, _x.headPan, _x.headNeck, _x.mouth))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 144
      (_x.jointLF1, _x.jointLF2, _x.jointLF3, _x.jointLH1, _x.jointLH2, _x.jointLH3, _x.jointRF1, _x.jointRF2, _x.jointRF3, _x.jointRH1, _x.jointRH2, _x.jointRH3, _x.tailPan, _x.tailTilt, _x.headTilt, _x.headPan, _x.headNeck, _x.mouth,) = _struct_18d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_18d.pack(_x.jointLF1, _x.jointLF2, _x.jointLF3, _x.jointLH1, _x.jointLH2, _x.jointLH3, _x.jointRF1, _x.jointRF2, _x.jointRF3, _x.jointRH1, _x.jointRH2, _x.jointRH3, _x.tailPan, _x.tailTilt, _x.headTilt, _x.headPan, _x.headNeck, _x.mouth))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 144
      (_x.jointLF1, _x.jointLF2, _x.jointLF3, _x.jointLH1, _x.jointLH2, _x.jointLH3, _x.jointRF1, _x.jointRF2, _x.jointRF3, _x.jointRH1, _x.jointRH2, _x.jointRH3, _x.tailPan, _x.tailTilt, _x.headTilt, _x.headPan, _x.headNeck, _x.mouth,) = _struct_18d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_18d = struct.Struct("<18d")
